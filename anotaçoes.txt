\n nova linha
\t tabulação
\b backspace
\r retorno
\\ barra
\" aspas
\? interrogação
\a ou \7 emite um bipe
%% porcentagem

#include <locale.h>
setlocale(LC_ALL, "Portuguese");
nessa importação e usando o setlocale, podemos usar acentuações no nosso programa.

# Tipos primitivos
int - numéros inteiros. exemplo:
1834, -18, 123
o int tem 4 prefixos, short, long, signed, unsigned
- short %hd - vai ocupar metade da memória que o int ocupa (2)
- long %ld - vai ocupar o dobro da memória que o int ocupa (4)
- signed - um número inteiro que tem sinal, podendo ser positivo ou negativo
- unsigned %u - um número inteiro que não tem sinal, é sempre positivo


float - números reais, exemplo:
4.5, 0.075, -1.0893

char - string, um caracter, exemplo :
a, b, c, d, e

double - o dobro do ponto flutuante
void - vazio, ou seja, ele não vai retornar nada

%d int
%f float/double
%c char
%s cadeia
eu posso definir quantas casas decimais usar no float. exemplo:
%.2f 60.6

# Regras da linguagem C para variáveis:
- Toda variável começa com uma letra
- Maiúsculas e minúsculas fazem diferença
- Só usa letras, números e sublinhados (underline)
- Nada de acentos, nem caracteres especiais
- Único simbolo aceito é o sublinhado (underline)
- Não pode ser uma palavra reservada

Variável é aquilo que varia, constante é aquilo que não varia

#define vs const
- #define é uma diretiva de pré-processamento
- const é uma palavra reservada do C
- com #define, o valor é substituido antes da compilação
- com const, a constante existe na memória
- com const é possível indicar o tipo primitivo da constante

# lendo números
- int num;
- float med;
- scanf("%d", &num);
- scanf("%f", &med);

# limpando a memória para um novo input
fflush(stdin);

# o scanf não aceita espaços na string, então para strings, o certo é fgets, exemplo :
char nome[20];
fgets(nome, 20, stdin);

# operadores aritméticos
- + adição
- - subtração
- * multiplicação
- / divisão
- % módulo/resto de divisão

para usar o operador de divisão corretamente, devemos definir os tipos dos números, se usarmos dois números inteiros, a divisão vai ser inteira, por isso se quisermos o resultado real devemos usar números reais

# ordem de precedência dos operadores aritméticos

1) ()
2) + - quem vier primeiro
3) * / % quem vier primeiro
4) + - binários

# typecast ou coerção

para forçar o tipo de alguma variavel numa outra variável, se eu criar as variáveis de número inteiro ou qualquer outro tipo a e b, e eu posso na minha variável definir o tipo das variaveis a e b, exemplo : 
float soma = (float) a + b;

# operadores relacionais

== igual
!= diferente
> maior
< menor
>= maior ou igual
<= menor ou igual
os operadores sempre retornam um valor lógico. true == 1, false == 0

#include <string.h>

strcpy() - retorna a string copiada
strlen() - retorna quantos caracteres tem dentro da string
strcmp() - comparação entre duas strings
strcat() - função de concatenação de strings
strupr() - abrir o arquivo aula05.c para ver como implementar esta funcionalidade
strlwr() - abrir o arquivo aula05.c para ver como implementar esta funcionalidade

# operadores lógicos
&& conjunção (e)
|| disjunção (ou)
! negação (não)

&& na conjunção se os dois forem verdadeiros, o resultado é verdadeiro, se um for falso, será falso:
v v = v
v f = f
f v = f
f f = f 

|| na disjunção, basta um ser verdadeiro para ele ser verdadeiro :
v v = v
v f = v
f v = v
f f = f

! na negação uma coisa que não é verdadeira, é falsa, e uma coisa que não é falsa, é verdadeira
v = f
f = v

# ordem de precedência dos operadores lógicos
!
&&
||

# incremento e decremento
++ mais 1
-- menos 1
a ordem de pré e pós incremento é importante, exemplos na aula08 do módulo2

# operadores bitwise
& conjunção
1 1 = 1
0 1 = 0
1 0 = 0
0 0 = 0

| disjunção
1 0 = 1
0 1 = 1
1 1 = 0
0 0 = 0

^ disjunção exclusiva
1 1 = 0
1 0 = 1
0 1 = 1
0 0 = 0

>> right shift (deslocamento pra direita)
desloca o meu número binário, para a direita
ele remove os bits do final (dependendo de quantos bits vc vai deslocar para a direita)

<< left shift (deslocamento pra esquerda)
desloca o meu número binário, para a esquerda
ele adiciona os bit no final (dependendo de quantos bits vc vai deslocar para a esquerda (sempre os bits deslocados para esquerda serão bits zero))

# pegar hora atual
#include <time.h>
time_t t;
time(&t);
struct tm *data;
data = localtime(&t);
int d = data -> tm_mday; // dia
                tm_mon; // mês
                tm_year; // ano (a partir de 1900)
                tm_wdar; // dia da semana
                tm_hour; // hora atual
                tm_min; // minuto atual
                tm_sec; // segundo atual

# switch case em C
exemplo
switch(num){
    case 1:
        printf("Um");
        break;
    case 2:
        printf("Dois");
        break;
    default:
        printf("Isso não é um número");
        break; (o último break é sempre opcional)
}